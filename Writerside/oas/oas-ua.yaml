openapi: "3.0.0"
info:
  description: "# Introduction\nThis template is intended to to be a good starting point for describing\nhow users can interact with the various methods of your API. \nWe recommend informing the user about various aspects of your api such as:\n\n\n# Getting Started\n\n## Using The API\n\n## Extra Developer Documentation:\nIf you have more developer documentation or tutorials specific to helping\ndevelopers interact with this endpoint.\n**url:** 'https://example.com/documentation/link'\n\n# Uptime & Planned Outages\n\n# Authentication & Rate Limits\n# Terms of Use, Copyright and Attribution\nPlease ensure you comply with the following policies prior to using any data\nwithin this API.\n\n- [Terms of Use](https://example.com/terms-use)\n- [Privacy Policy](https://example.com/privacy)\n\n# Contact Us\n"
  contact:
    email: "jakub.manak@unicornuniversity.net"
    url: "https://example.com/contact"
  version: "unreleased"
  title: "UA Portal REST API"
paths:
  /ump/aircraft:
    get:
      tags:
        - "aircraft"
      parameters: [ ]
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/aircraft"
      summary: "List aircraft"
      operationId: "listaircraft"
      description: "Some description of the operation.\n\n***You can use keep using `markdown` here to write out your description in more detail.***\n"
    post:
      tags:
        - "aircraft"
      parameters: [ ]
      responses:
        201:
          description: "Created."
          content:
            application/json:
              examples:
                response:
                  value: "{\n  \"status\": \"201\",\n  \"description\": \"The resource was created. The Response Location HTTP header should be returned to indicate where the newly created resource is accessible.\",\n  \"more_info\": \"\"\n} \n"
      summary: "Create a new aircraft "
      operationId: "createaircraft"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/aircraft"
      description: "Some description of the operation.\n\n***You can use keep using `markdown` here to write out your description in more detail.***\n"
  /ump/aircraft/{aircraft_id}:
    get:
      tags:
        - "aircraft"
      parameters:
        - name: "aircraft_id"
          description: "Unique identifier for the aircraft."
          schema:
            type: "string"
            format: "uuid"
          in: "path"
          required: true
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/aircraft"
      summary: "Get an aircraft"
      operationId: "getaircraftById"
      description: "Some description of the operation.\n\n***You can use keep using `markdown` here to write out your description in more detail.***\n"
    delete:
      tags:
        - "aircraft"
      parameters:
        - name: "aircraft_id"
          description: "Unique identifier for the aircraft."
          schema:
            type: "string"
            format: "uuid"
          in: "path"
          required: true
      responses:
        204:
          description: "No content."
          content:
            application/json:
              examples:
                response:
                  value: "{\n  \"status\": \"204\",\n  \"description\": \"The server successfully processed the request and is not returning any content. \",\n  \"more_info\": \"\"\n} \n"
      summary: "Delete an aircraft"
      operationId: "deleteaircraftById"
      description: "Some description of the operation.\n\n***You can use keep using `markdown` here to write out your description in more detail.***\n"
  /ump/sensors:
    get:
      tags:
        - "sensor"
      parameters: [ ]
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/sensor"
      summary: "List sensors"
      operationId: "listsensors"
      description: "Some description of the operation.\n\n***You can use keep using `markdown` here to write out your description in more detail.***\n"
    post:
      tags:
        - "sensor"
      parameters: [ ]
      responses:
        201:
          description: "Created."
          content:
            application/json:
              examples:
                response:
                  value: "{\n  \"status\": \"201\",\n  \"description\": \"The resource was created. The Response Location HTTP header should be returned to indicate where the newly created resource is accessible.\",\n  \"more_info\": \"\"\n} \n"
      summary: "Create a new sensor "
      operationId: "createsensor"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/sensor"
      description: "Some description of the operation.\n\n***You can use keep using `markdown` here to write out your description in more detail.***\n"
  /ump/sensors/{sensor_id}:
    get:
      tags:
        - "sensor"
      parameters:
        - name: "sensor_id"
          description: "Unique identifier for the sensor."
          schema:
            type: "string"
            format: "uuid"
          in: "path"
          required: true
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/sensor"
      summary: "Get a sensor"
      operationId: "getsensorById"
      description: "Some description of the operation.\n\n***You can use keep using `markdown` here to write out your description in more detail.***\n"
    patch:
      tags:
        - "sensor"
      parameters:
        - name: "sensor_id"
          description: "Unique identifier for the sensor."
          schema:
            type: "string"
            format: "uuid"
          in: "path"
          required: true
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/sensor"
      summary: "Update a sensor"
      operationId: "updatesensorById"
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: "#/components/schemas/JSONPatch"
      description: "Some description of the operation.\n\n***You can use keep using `markdown` here to write out your description in more detail.***\n\n\nThis API call uses [JSONPatch](https://www.rfc-editor.org/rfc/rfc6902) to describe the updates made to the sensor."
    delete:
      tags:
        - "sensor"
      parameters:
        - name: "sensor_id"
          description: "Unique identifier for the sensor."
          schema:
            type: "string"
            format: "uuid"
          in: "path"
          required: true
      responses:
        204:
          description: "No content."
          content:
            application/json:
              examples:
                response:
                  value: "{\n  \"status\": \"204\",\n  \"description\": \"The server successfully processed the request and is not returning any content. \",\n  \"more_info\": \"\"\n} \n"
      summary: "Delete a sensor"
      operationId: "deletesensorById"
      description: "Some description of the operation.\n\n***You can use keep using `markdown` here to write out your description in more detail.***\n"
  /ump/products:
    get:
      tags:
        - "product"
      parameters: [ ]
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/product"
      summary: "List products"
      operationId: "listproducts"
      description: "Some description of the operation.\n\n***You can use keep using `markdown` here to write out your description in more detail.***\n"
    post:
      tags:
        - "product"
      parameters: [ ]
      responses:
        201:
          description: "Created."
          content:
            application/json:
              examples:
                response:
                  value: "{\n  \"status\": \"201\",\n  \"description\": \"The resource was created. The Response Location HTTP header should be returned to indicate where the newly created resource is accessible.\",\n  \"more_info\": \"\"\n} \n"
      summary: "Create a new product "
      operationId: "createproduct"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/product"
      description: "Some description of the operation.\n\n***You can use keep using `markdown` here to write out your description in more detail.***\n"
  /ump/products/{product_id}:
    get:
      tags:
        - "product"
      parameters:
        - name: "product_id"
          description: "Unique id of product"
          schema:
            type: "string"
            format: "uuid"
          in: "path"
          required: true
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/product"
      summary: "Get a product"
      operationId: "getproductById"
      description: "Some description of the operation.\n\n***You can use keep using `markdown` here to write out your description in more detail.***\n"
    patch:
      tags:
        - "product"
      parameters:
        - name: "product_id"
          description: "Unique id of product"
          schema:
            type: "string"
            format: "uuid"
          in: "path"
          required: true
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/product"
      summary: "Update a product"
      operationId: "updateproductById"
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: "#/components/schemas/JSONPatch"
      description: "Some description of the operation.\n\n***You can use keep using `markdown` here to write out your description in more detail.***\n\n\nThis API call uses [JSONPatch](https://www.rfc-editor.org/rfc/rfc6902) to describe the updates made to the product."
    delete:
      tags:
        - "product"
      parameters:
        - name: "product_id"
          description: "Unique id of product"
          schema:
            type: "string"
            format: "uuid"
          in: "path"
          required: true
      responses:
        204:
          description: "No content."
          content:
            application/json:
              examples:
                response:
                  value: "{\n  \"status\": \"204\",\n  \"description\": \"The server successfully processed the request and is not returning any content. \",\n  \"more_info\": \"\"\n} \n"
      summary: "Delete a product"
      operationId: "deleteproductById"
      description: "Some description of the operation.\n\n***You can use keep using `markdown` here to write out your description in more detail.***\n"
  /testClasses:
    get:
      tags:
        - "testClass"
      parameters: [ ]
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/testClass"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
      summary: "List testClasses"
      operationId: "listtestClasses"
      description: "Some description of the operation.\n\n***You can use keep using `markdown` here to write out your description in more detail.***\n"
    post:
      tags:
        - "testClass"
      parameters: [ ]
      responses:
        201:
          description: "Created."
          content:
            application/json:
              examples:
                response:
                  value: "{\n  \"status\": \"201\",\n  \"description\": \"The resource was created. The Response Location HTTP header should be returned to indicate where the newly created resource is accessible.\",\n  \"more_info\": \"\"\n} \n"
      summary: "Create a new testClass "
      operationId: "createtestClass"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/testClass"
      description: "Some description of the operation.\n\n***You can use keep using `markdown` here to write out your description in more detail.***\n"
  /testClasses/{îd}:
    get:
      tags:
        - "testClass"
      parameters:
        - name: "îd"
          description: ""
          schema:
            type: "string"
            format: "uuid"
          in: "path"
          required: true
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/testClass"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
      summary: "Get a testClass"
      operationId: "gettestClassById"
      description: "Some description of the operation.\n\n***You can use keep using `markdown` here to write out your description in more detail.***\n"
    patch:
      tags:
        - "testClass"
      parameters:
        - name: "îd"
          description: ""
          schema:
            type: "string"
            format: "uuid"
          in: "path"
          required: true
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/testClass"
      summary: "Update a testClass"
      operationId: "updatetestClassById"
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: "#/components/schemas/JSONPatch"
      description: "Some description of the operation.\n\n***You can use keep using `markdown` here to write out your description in more detail.***\n\n\nThis API call uses [JSONPatch](https://www.rfc-editor.org/rfc/rfc6902) to describe the updates made to the testClass."
    delete:
      tags:
        - "testClass"
      parameters:
        - name: "îd"
          description: ""
          schema:
            type: "string"
            format: "uuid"
          in: "path"
          required: true
      responses:
        204:
          description: "No content."
          content:
            application/json:
              examples:
                response:
                  value: "{\n  \"status\": \"204\",\n  \"description\": \"The server successfully processed the request and is not returning any content. \",\n  \"more_info\": \"\"\n} \n"
      summary: "Delete a testClass"
      operationId: "deletetestClassById"
      description: "Some description of the operation.\n\n***You can use keep using `markdown` here to write out your description in more detail.***\n"
components:
  schemas:
    Error:
      type: "object"
      properties:
        status:
          type: "integer"
          format: "int32"
          description: "HTTP status code of the error"
          example: 400
        message:
          type: "string"
          description: "Error message"
          example: "Invalid request parameters"
        details:
          type: "array"
          description: "Detailed information about the error"
          items:
            type: "object"
            properties:
              field:
                type: "string"
                description: "Field where the error occurred"
                example: "username"
              issue:
                type: "string"
                description: "Description of the issue"
                example: "Username already exists"
    aircraft:
      type: "object"
      additionalProperties: false
      properties:
        aircraft_id:
          x-jargon-isKey: true
          type: "string"
          format: "uuid"
          description: "Unique identifier for the aircraft."
        type:
          type: "string"
          description: "Type of UA, fixed wing, rotor wing, "
        model:
          type: "string"
          description: "The model name of the aircraft."
        manufacturer:
          type: "string"
          description: "The manufacturer of the aircraft."
        registration_number:
          type: "string"
          description: "The unique registration number of the aircraft."
        status:
          type: "string"
          description: "Current status of the aircraft (e.g., operational, under maintenance)."
        last_maintenance_date:
          type: "number"
          description: "The Date in long unix epoch when the aircraft last underwent maintenance."
        next_maintenance_date:
          type: "number"
          description: "The scheduled Date in long unix epoch for the next maintenance."
        location:
          type: "string"
          description: "Current location of the aircraft."
        operational_hours:
          type: "number"
          description: "Total operational hours logged by the aircraft."
        last_flight:
          type: "number"
          description: "Date in long unix epoch."
        sensors:
          type: "array"
          items:
            $ref: "#/components/schemas/sensor"
          description: "List of sensor payloads attached to the aircraft, each containing:"
        date_created:
          type: "number"
          description: "Date in long unix epoch of creations."
        date_modified:
          type: "number"
          description: "Date in long unix epoch of modification"
      description: "UA which can be track a maintanence"
    sensor:
      type: "object"
      additionalProperties: false
      properties:
        sensor_id:
          x-jargon-isKey: true
          type: "string"
          format: "uuid"
          description: "Unique identifier for the sensor."
        type:
          type: "string"
          description: "Type of sensor - EO, MWIR, SWIR"
        products:
          type: "array"
          items:
            $ref: "#/components/schemas/product"
          description: "List of products related to sensor."
        last_maintenance_date:
          type: "number"
          description: "The Date in long unix epoch when the aircraft last underwent maintenance."
        next_maintenance_date:
          type: "number"
          description: "The scheduled Date in long unix epoch for the next maintenance."
        date_created:
          type: "number"
          description: "Date in long unix epoch of creations."
        date_modified:
          type: "number"
          description: "Date in long unix epoch of modification"
      description: "Type of sensors what are able to be mounteed to UA"
    product:
      type: "object"
      additionalProperties: false
      properties:
        product_id:
          x-jargon-isKey: true
          type: "string"
          format: "uuid"
          description: "Unique id of product"
        type:
          type: "string"
          description: "Enumeriation type of UA - Scan Eagle, Heron, ,Raven"
        date_created:
          type: "number"
          description: "Date in long unix epoch of creations."
        date_modified:
          type: "number"
          description: "Date in long unix epoch of modification"
      description: "Type of sensors what are able to be mounteed to UA"
    testClass:
      type: "object"
      additionalProperties: false
      properties:
        îd:
          x-jargon-isKey: true
          type: "string"
          format: "uuid"
          description: ""
        table_code:
          type: "string"
          enum:
            - "status"
            - "status2"
            - "status3"
          example: "status"
          description: ""
        atribut:
          type: "string"
          description: ""
      description: ""
    TemplateErrorSchema:
      type: "object"
      properties:
        errors:
          type: "array"
          items:
            $ref: "#/components/schemas/TemplateError"
          description: ""
    TemplateError:
      type: "object"
      properties:
        id:
          type: "string"
          readOnly: true
          description: ""
        detail:
          type: "string"
          description: ""
        code:
          type: "string"
          description: ""
        source:
          $ref: "#/components/schemas/TemplateErrorSource"
          description: ""
    TemplateErrorSource:
      type: "object"
      properties:
        pointer:
          type: "string"
          description: ""
        parameter:
          type: "string"
          description: ""
    JSONPatch:
      type: "array"
      items:
        oneOf:
          - title: "JSONPathAdd"
            type: "object"
            additionalProperties: false
            required:
              - "value"
              - "op"
              - "path"
            properties:
              path:
                description: "The JSONPath to add"
                type: "string"
              value:
                description: "Value to be added"
              op:
                description: "Add operation"
                type: "string"
                enum:
                  - "add"
          - title: "JSONPatchReplace"
            type: "object"
            additionalProperties: false
            required:
              - "value"
              - "op"
              - "path"
            properties:
              path:
                description: "The JSONPath to replace"
                type: "string"
              value:
                description: "Value to be replaced"
              op:
                description: "Replace operation"
                type: "string"
                enum:
                  - "replace"
          - title: "JSONPatchTest"
            type: "object"
            additionalProperties: false
            required:
              - "value"
              - "op"
              - "path"
            properties:
              path:
                description: "The JSONPath to test"
                type: "string"
              value:
                description: "Value to be tested"
              op:
                description: "Test operation"
                type: "string"
                enum:
                  - "test"
          - title: "JSONPatchRemove"
            type: "object"
            additionalProperties: false
            required:
              - "op"
              - "path"
            properties:
              path:
                description: "The JSONPath to remove"
                type: "string"
              op:
                description: "Remove operation"
                type: "string"
                enum:
                  - "remove"
          - title: "JSONPatchCopy"
            type: "object"
            additionalProperties: false
            required:
              - "from"
              - "op"
              - "path"
            properties:
              path:
                description: "The JSONPath destination"
                type: "string"
              op:
                description: "Copy operation"
                type: "string"
                enum:
                  - "copy"
              from:
                description: "The JSONPath to move from"
                type: "string"
          - title: "JSONPatchMove"
            type: "object"
            additionalProperties: false
            required:
              - "from"
              - "op"
              - "path"
            properties:
              path:
                description: "The JSONPath destination"
                type: "string"
              op:
                description: "Move operation"
                type: "string"
                enum:
                  - "move"
              from:
                description: "The JSONPath to move from"
                type: "string"
  responses:
    404:
      description: "Not found."
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          examples:
            response:
              value: |
                {
                  "status": "404",
                  "description": "The resource was not found.",
                  "more_info": ""
                }
    500:
      description: "Internal Server Error."
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          examples:
            response:
              value: |
                {
                  "status": "500",
                  "description": "An internal server error. The response body may contain error messages.",
                  "more_info": ""
                }
  securitySchemes: {}

servers:
  - url: "/ump/v1/"
