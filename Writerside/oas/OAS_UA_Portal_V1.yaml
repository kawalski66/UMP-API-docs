openapi: "3.0.0"
info:
  description: "# Introduction\nThis template is intended to to be a good starting point for describing\nhow users can interact with the various methods of your API. \nWe recommend informing the user about various aspects of your api such as:\n\n\n# Getting Started\n\n## Using The API\n\n## Extra Developer Documentation:\nIf you have more developer documentation or tutorials specific to helping\ndevelopers interact with this endpoint.\n**url:** 'https://example.com/documentation/link'\n\n# Uptime & Planned Outages\n\n# Authentication & Rate Limits\n# Terms of Use, Copyright and Attribution\nPlease ensure you comply with the following policies prior to using any data\nwithin this API.\n\n- [Terms of Use](https://example.com/terms-use)\n- [Privacy Policy](https://example.com/privacy)\n\n# Contact Us\n"
  contact:
    email: "jakub.manak@unicornuniversity.net"
    url: "https://example.com/contact"
  version: "unreleased"
  title: "UA Portal REST API"
paths:
  /ump/v1/aircrafts/aircraft/findById, findByType:
    post:
      tags:
        - "aircraft"
      parameters: []
      responses:
        201:
          description: "Created."
          content:
            application/json:
              examples:
                response:
                  value: "{\n  \"status\": \"201\",\n  \"description\": \"The resource was created. The Response Location HTTP header should be returned to indicate where the newly created resource is accessible.\",\n  \"more_info\": \"\"\n} \n"
      summary: "Create a new aircraft "
      operationId: "createaircraft_findById, findByType_findById, findByType"
      requestBody:
        content:
          application/json:
            schema:
      description: "Some description of the operation.\n\n***You can use keep using `markdown` here to write out your description in more detail.***\n"
  /ump/v1/aircrafts/aircraft/{aircraft_id}/findById, findByType:
    get:
      tags:
        - "aircraft"
      parameters:
        - name: "aircraft_id"
          description: "Unique identifier for the aircraft."
          schema:
            type: "string"
            format: "uuid"
          in: "path"
          required: true
        - in: "query"
          name: "type"
          description: "Type of UA, fixed wing, rotor wing, "
          schema:
            type: "string"
        - in: "query"
          name: "page"
          schema:
            type: "number"
          description: "The page that the user wants to return."
          required: false
        - in: "query"
          name: "limit"
          schema:
            type: "number"
          description: "The number of results per page the user wants to return."
          required: false
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/aircraft"
        201:
          $ref: "#/components/responses/201"
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        405:
          $ref: "#/components/responses/405"
        415:
          $ref: "#/components/responses/415"
        422:
          $ref: "#/components/responses/422"
        500:
          $ref: "#/components/responses/500"
        501:
          $ref: "#/components/responses/501"
      summary: "Get an aircraft"
      operationId: "getaircraftById_findById, findByType"
      description: "Some description of the operation.\n\n***You can use keep using `markdown` here to write out your description in more detail.***\n\n\n\nThis path supports pagination and uses the following query parameters:\n\n| Query Parameter | Description | Example |\n| --- | --- | --- |\n| 'page' | The page that the user wants to return. | 'page=1' (default: 1)|\n| 'limit' | The number of results per page the user wants to return. | 'limit=10' (default: 10)|\n\nThis creates a URI structure similar to:\n\nPage 1: '/ump/v1/aircrafts/aircraft/{aircraft_id}/findById, findByType?page=1&limit=10'\n\nPage 2: '/ump/v1/aircrafts/aircraft/{aircraft_id}/findById, findByType?page=2&limit=10'\n\n"
      security:
        - api_key: [ ]
    delete:
      tags:
        - "aircraft"
      parameters:
        - name: "aircraft_id"
          description: "Unique identifier for the aircraft."
          schema:
            type: "string"
            format: "uuid"
          in: "path"
          required: true
      responses:
        204:
          description: "No content."
          content:
            application/json:
              examples:
                response:
                  value: "{\n  \"status\": \"204\",\n  \"description\": \"The server successfully processed the request and is not returning any content. \",\n  \"more_info\": \"\"\n} \n"
      summary: "Delete an aircraft"
      operationId: "deleteaircraftById_findById, findByType"
      description: "Some description of the operation.\n\n***You can use keep using `markdown` here to write out your description in more detail.***\n"
components:
  schemas:
    aircraft:
      type: "object"
      additionalProperties: false
      properties:
        aircraft_id:
          x-jargon-isKey: true
          type: "string"
          format: "uuid"
          description: "Unique identifier for the aircraft."
        type:
          type: "string"
          description: "Type of UA, fixed wing, rotor wing, "
        model:
          type: "string"
          description: "The model name of the aircraft."
        manufacturer:
          type: "string"
          description: "The manufacturer of the aircraft."
        registration_number:
          type: "string"
          description: "The unique registration number of the aircraft."
        status:
          type: "string"
          description: "Current status of the aircraft (e.g., operational, under maintenance)."
        last_maintenance_date:
          type: "number"
          description: "The Date in long unix epoch when the aircraft last underwent maintenance."
        next_maintenance_date:
          type: "number"
          description: "The scheduled Date in long unix epoch for the next maintenance."
        location:
          type: "string"
          description: "Current location of the aircraft."
        operational_hours:
          type: "number"
          description: "Total operational hours logged by the aircraft."
        last_flight:
          type: "number"
          description: "Date in long unix epoch."
        sensors:
          type: "array"
          items:
          description: "List of sensor payloads attached to the aircraft, each containing:"
        date_created:
          type: "number"
          description: "Date in long unix epoch of creations."
        date_modified:
          type: "number"
          description: "Date in long unix epoch of modification"
      description: "UA which can be track a maintanence"
  responses:
    201:
      description: "Created."
      content:
        application/json:
          examples:
            response:
              value: "{\n  \"status\": \"201\",\n  \"description\": \"The resource was created. The Response Location HTTP header should be returned to indicate where the newly created resource is accessible.\",\n  \"more_info\": \"\"\n} \n"
    400:
      description: "Bad Request."
      content:
        application/json:
          schema:
          examples:
            response:
              value: "{\n  \"errors\": [\n    {\n      \"id\": \"86032cbe-a804-4c3b-86ce-ec3041e3effc\",\n      \"detail\": \"Invalid value(s) in request input\",\n      \"code\": \"19283\",\n      \"source\": {\n        \"parameter\": \"postcode\"\n      }\n    },\n    {\n      \"id\": \"45786a8f-452e-492f-a779-801b5d0bd0a7\",\n      \"detail\": \"Input value(s) exceeded maximum length\",\n      \"code\": \"19284\",\n      \"source\": {\n        \"parameter\": \"last_name\"\n      }\n    }\n  ]\n}\n"
    403:
      description: "Forbidden."
      content:
        application/json:
          examples:
            response:
              value: "{\n  \"status\": \"403\",\n  \"description\": \"The request was authenticated but is not authorised to access the resource.\",\n  \"more_info\": \"\"\n}\n"
    404:
      description: "Not found."
      content:
        application/json:
          examples:
            response:
              value: "{\n  \"status\": \"404\",\n  \"description\": \"The resource was not found.\",\n  \"more_info\": \"\"\n}\n"
    500:
      description: "Internal Server Error."
      content:
        application/json:
          examples:
            response:
              value: "{\n  \"status\": \"500\",\n  \"description\": \"An internal server error. The response body may contain error messages.\",\n  \"more_info\": \"\"\n}\n \n"
