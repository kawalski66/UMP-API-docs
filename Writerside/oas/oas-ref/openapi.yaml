openapi: "3.0.0"
info:
  description: "# UA System API - Overview\n\n## Introduction\n\nThis document serves as a comprehensive guide to help users interact with the various methods of the UA System API. The UA System API is designed to facilitate the management and operation of unmanned aerial systems (UAS) by providing access to essential data and functionalities.\n\n## Getting Started\n\nTo get started with the UA System API, follow these steps to ensure a smooth integration and usage experience.\n\n### Using The API\n\nThe UA System API allows you to access and manage data related to unmanned aerial systems. This includes functionalities such as retrieving UAS data, managing equipment, and overseeing operational tasks. The API is built using RESTful web services, ensuring it is robust, scalable, and easy to use.\n\n## Uptime & Planned Outages\n\nThe UA System API aims to maintain high availability and reliability. Any planned outages or maintenance windows will be communicated in advance to ensure minimal disruption. Real-time status updates and planned maintenance schedules can be found on our status page.\n\n### Rate Limits\n\nTo ensure fair usage and system stability, the UA System API enforces rate limits on the number of requests a user can make. The standard rate limit is 70 requests per minute. If this limit is exceeded, users will receive a `429 Too Many Requests` response, with a `Retry-After` header indicating when they can make the next request.\n\n## Contact Us\n\nFor any questions, support requests, or feedback regarding the UA System API, please contact us through the following channels:\n\n- **Email**: support@example.com\n- **Phone**: +1-800-555-1234\n- **Support Portal**: [Contact Support](https://example.com/support)\n\nWe are committed to providing timely and helpful assistance to ensure a positive experience with the UA System API."
  contact:
    email: "jakub.manak@unicornuniversity.net"
    url: "https://example.com/contact"
  version: 0.1.0
  title: "UA System API"
tags:
  - name: "aircraft"
    description: "UA operations."
  - name: "transmitter"
    description: "Transmitter operations related to UA."
  - name: "transponder"
    description: "Transponder operations related to UA."
  - name: "sensor"
    description: "Sensor operations."
  - name: "product"
    description: "Product operations."
paths:
  /ump/aircraft:
    $ref: "./paths/paths.yaml#/paths/listAircraft"
  /ump/aircraft/{aircraft_id}:
    $ref: "./paths/paths.yaml#/paths/aircraftId"
  /ump/aircraft/{aircraft_id}/transmitters:
    $ref: "./paths/paths.yaml#/paths/aircraftIdTransmitter"
  /ump/aircraft/{aircraft_id}/transponders/{transponder_id}:
    $ref: "./paths/paths.yaml#/paths/aircraftIdTransponder"
  /ump/sensors:
    $ref: "./paths/paths.yaml#/paths/listSensors"
  /ump/sensors/{sensor_id}:
    $ref: "./paths/paths.yaml#/paths/sensorId"

  /ump/products:
    get:
      tags:
        - "product"
      parameters:
        - in: "query"
          name: "type"
          description: "Enumeriation type of UA - Scan Eagle, Heron, ,Raven"
          schema:
            type: "string"
            enum:
              - "photo"
              - "video"
              - "LIDAR"
        - in: "query"
          name: "date_created"
          description: "Date in long unix epoch of creations."
          schema:
            type: "number"
        - in: "query"
          name: "date_modified"
          description: "Date in long unix epoch of modification"
          schema:
            type: "number"
        - in: "query"
          name: "type_of_sensor"
          description: "Type of sensor - EO, MWIR, SWIR"
          schema:
            type: "string"
            enum:
              - "EO"
              - "MWIR"
              - "SWIR"
        - in: "query"
          name: "date_created_of sensor"
          description: "Date in long unix epoch of creations."
          schema:
            type: "number"
        - in: "query"
          name: "aircraft_id"
          description: "Unique identifier for the aircraft."
          schema:
            type: "string"
        - in: "query"
          name: "registration_number"
          description: "The unique registration number of the aircraft."
          schema:
            type: "integer"
        - in: "query"
          name: "last_flight"
          description: "Date in long unix epoch."
          schema:
            type: "number"
        - in: "query"
          name: "page"
          schema:
            type: "number"
          description: "The page that the user wants to return."
          required: false
        - in: "query"
          name: "limit"
          schema:
            type: "number"
          description: "The number of results per page the user wants to return."
          required: false
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/product"
      summary: "List products"
      operationId: "listproducts"
      description: "List products"
    post:
      tags:
        - "product"
      parameters: [ ]
      responses:
        201:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/product"
      summary: "Create a new product "
      operationId: "createproduct"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/product"
      description: "Fetch list of product."
  /ump/products/{product_id}:
    get:
      tags:
        - "product"
      parameters:
        - name: "product_id"
          description: "Unique id of product"
          schema:
            type: "string"
            format: "uuid"
          in: "path"
          required: true
        - in: "query"
          name: "type"
          description: "Enumeration type of UA - Scan Eagle, Heron, Raven"
          schema:
            type: "string"
            enum:
              - "photo"
              - "video"
              - "LIDAR"
        - in: "query"
          name: "date_created"
          description: "Date in long unix epoch of creations."
          schema:
            type: "number"
        - in: "query"
          name: "date_modified"
          description: "Date in long unix epoch of modification"
          schema:
            type: "number"
        - in: "query"
          name: "type_of_sensor"
          description: "Type of sensor - EO, MWIR, SWIR"
          schema:
            type: "string"
            enum:
              - "EO"
              - "MWIR"
              - "SWIR"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/product"
      summary: "Get a product"
      operationId: "getproductById"
      description: "Fetch product resource by Id."
    put:
      tags:
        - "product"
      parameters:
        - name: "product_id"
          description: "Unique id of product"
          schema:
            type: "string"
            format: "uuid"
          in: "path"
          required: true
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/product"
      summary: "Replace a product"
      operationId: "replaceproductById"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/product"
      description: "Create or replace product resource."
    delete:
      tags:
        - "product"
      parameters:
        - name: "product_id"
          description: "Unique id of product"
          schema:
            type: "string"
            format: "uuid"
          in: "path"
          required: true
      responses:
        204:
          description: "OK"
      summary: "Delete a product"
      operationId: "deleteproductById"
      description: "Delete product resource by Id."
components:
  schemas:
    error:
      $ref: "./schemas/schemas.yaml#/schemas/error"
    aircraft:
      $ref: "./schemas/schemas.yaml#/schemas/aircraft"
    sensor:
      $ref: "./schemas/schemas.yaml#/schemas/sensor"
    product:
      $ref: "./schemas/schemas.yaml#/schemas/product"
    transmitter:
      $ref: "./schemas/schemas.yaml#/schemas/transmitter"
    transponder:
      $ref: "./schemas/schemas.yaml#/schemas/transmitter"

  requestBodies:
    aircraftIdBody:
      $ref: "./schemas/requestBodies.yaml#/requestBodies/aircraftIdBody"

  parameters:
    aircraftIdParam:
      $ref: "./parameters/aircraftParameters.yaml#/parameters/aircraftIdParam"
    typeUaParam:
      $ref: "./parameters/aircraftParameters.yaml#/parameters/typeUaParam"
    modelUaParam:
      $ref: "./parameters/aircraftParameters.yaml#/parameters/modelUaParam"
    statusUaParam:
      $ref: "./parameters/aircraftParameters.yaml#/parameters/statusUaParam"
    lastFlightUaParam:
      $ref: "./parameters/aircraftParameters.yaml#/parameters/lastFlightUaParam"
    registrationNumUaParam:
      $ref: "./parameters/aircraftParameters.yaml#/parameters/registrationNumUaParam"
    dateCreatedUaParam:
      $ref: "./parameters/aircraftParameters.yaml#/parameters/dateCreatedUaParam"
    dateModifiedUaParam:
      $ref: "./parameters/aircraftParameters.yaml#/parameters/dateModifiedUaParam"
    pageUaParam:
      $ref: "./parameters/aircraftParameters.yaml#/parameters/pageUaParam"
    limitUaParam:
      $ref: "./parameters/aircraftParameters.yaml#/parameters/limitUaParam"
    locationUaParam:
      $ref: "./parameters/aircraftParameters.yaml#/parameters/locationUaParam"

  responses:
    SuccessAircraft:
      $ref: "./responses/responses.yaml#/responses/SuccessAircraft"
    SuccessAircraftId:
      $ref: "./responses/responses.yaml#/responses/SuccessAircraftId"
    Deleted:
      $ref: "./responses/responses.yaml#/responses/Deleted"
  securitySchemes: { }
servers:
  - url: "/ump/v1/"